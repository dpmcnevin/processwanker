############################################################################
#
# dummy_service.rb
#
# class representing a fake service
#
############################################################################

require 'service'
require 'digest/md5'
require 'etc'
require 'process_service'
require 'process_util'

module ProcessWanker
	
	class DummyService < Service
		include Log

	  ############################################################################
	  #
	  #
	  #
	  ############################################################################

		def self.nice_name
			"dummy_service"
		end

	  ############################################################################
	  #
	  #
	  #
	  ############################################################################
	
	  def initialize(iparams)
			@state=(iparams[:initial_state] || :down).to_sym
	    super(iparams)    
	  end

	  ############################################################################
	  #
	  # start
	  #
	  ############################################################################
	  
	  def do_start(attempt_count)
	  	debug("do_start #{self.name}")
	  	@state=:up
	  end
	  
	  ############################################################################
	  #
	  # stop
	  #
	  ############################################################################
	  
	  def do_stop(attempt_count)
	  	debug("do_stop #{self.name}")
	  	@state=:down
	  end
	  
	  ############################################################################
	  #
	  # ping
	  #
	  # return run state of process
	  #
	  ############################################################################
	  
	  def do_ping
			@state
	  end

	  ############################################################################
	  #
	  #
	  #
	  ############################################################################
	  
	end


	ServiceMgr::register_service_class(DummyService)

end


